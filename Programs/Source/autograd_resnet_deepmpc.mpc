import nn as nn
from tensor import Tensor,autograd_function
import optimizer as optim
import dataloader as dataloader
import functional as F
program.use_trunc_pr = True
sfix.set_precision(23, 59)
cfix.set_precision(23, 59)
class Bottleneck(nn.Module):
    #stage
    extention=4
    def __init__(self,inplanes,planes,stride,downsample=None):
        '''

        :param inplanes: block
        :param planes: block
                planes*self.extention:
        :param stride:
        :param downsample:
        '''
        super(Bottleneck, self).__init__()
        # self.extention=4
        self.conv1=nn.Conv2d(inplanes,planes,kernel_size=1,stride=stride,bias=False)
        self.bn1=nn.BatchNorm2d(planes)

        self.conv2=nn.Conv2d(planes,planes,kernel_size=3,stride=1,padding=1,bias=False)
        self.bn2=nn.BatchNorm2d(planes)

        self.conv3=nn.Conv2d(planes,planes*self.extention,kernel_size=1,stride=1,bias=False)
        self.bn3=nn.BatchNorm2d(planes*self.extention)

        self.relu=nn.ReLU(inplace=True)

        #
        self.downsample=downsample
        self.stride=stride

    def forward(self,x):
        #
        residual=x

        #
        out=self.conv1(x)
        # out=self.bn1(out)
        out=self.relu(out)

        out=self.conv2(out)
        # out=self.bn2(out)
        out=self.relu(out)

        out=self.conv3(out)
        # out=self.bn3(out)
        # out=self.relu(out)

        #（Indentity blobk；Conv2 Block，size
        if self.downsample is not None:
            residual=self.downsample(x)

        #
        out+=residual
        out=self.relu(out)

        return out


class ResNet(nn.Module):
    def __init__(self,block,layers,num_class):
        #inplane=fm
        self.inplane=64
        super(ResNet, self).__init__()

        #
        self.block=block
        self.layers=layers

        #stem
        self.conv1=nn.Conv2d(3,self.inplane,kernel_size=7,stride=2,padding=3,bias=False)
        self.bn1=nn.BatchNorm2d(self.inplane)
        self.relu=nn.ReLU()
        self.maxpool=nn.AvgPool2d(kernel_size=3,stride=2,padding=1)

        #64,128,256,5124，Identity Block
        self.stage1=self.make_layer(self.block,64,layers[0],stride=1)
        self.stage2=self.make_layer(self.block,128,layers[1],stride=2)
        self.stage3=self.make_layer(self.block,256,layers[2],stride=2)
        self.stage4=self.make_layer(self.block,512,layers[3],stride=2)

        #
        self.avgpool=nn.AvgPool2d(7)
        self.fc=nn.Linear(512*block.extention,num_class)

    def forward(self,x):
        #stem：conv+bn+maxpool
        out=self.conv1(x)
        # out=self.bn1(out)
        # out=self.relu(out)
        out=self.maxpool(out)

        #block
        out=self.stage1(out)
        out=self.stage2(out)
        out=self.stage3(out)
        out=self.stage4(out)

        # #
        # out=self.avgpool(out)
        # out=out.flatten(1,-1)
        # out=self.fc(out)

        return out

    def make_layer(self,block,plane,block_num,stride=1):
        '''
        :param block: block
        :param plane: ，/4
        :param block_num: 
        :param stride: 
        :return:
        '''
        block_list=[]
        #downsample
        downsample=None
        if(stride!=1 or self.inplane!=plane*block.extention):
            downsample=nn.Sequential(
                nn.Conv2d(self.inplane,plane*block.extention,stride=stride,kernel_size=1,bias=False),
                # nn.BatchNorm2d(plane*block.extention)
            )

        # Conv Block（size），，
        # Identity Block （size），，
        #Conv_block
        conv_block=block(self.inplane,plane,stride=stride,downsample=downsample)
        block_list.append(conv_block)
        self.inplane=plane*block.extention

        #Identity Block
        for i in range(1,block_num):
            block_list.append(block(self.inplane,plane,stride=1))

        return nn.Sequential(*block_list)

model=ResNet(Bottleneck,[3,4,6,3],1000)
x = Tensor.ones(4, 3, 224, 224)
labels = Tensor.ones(4, 1000)
crossloss = nn.CrossEntropyLoss()
dataload = dataloader.DataLoader(x, labels, batch_size = 1, shuffle=False)
optimizer = optim.SGD(model.parameters(), lr = 0.01)
input, label = dataload.get_data(0)

output = model(input)
